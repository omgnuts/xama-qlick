#!/bin/bash

DATABASE_NAME=trakdb
USERID=sqlroot
PASSWORD=N@ptime88

# import some scripts
script_dir="$(dirname "$0")"

# . "$script_dir/configs/mongo-configs"
# . "$script_dir/configs/mssql-configs"
# . "$script_dir/configs/pgsql-configs"
. "$script_dir/configs/mysql-configs"

# --------------------------------

SHOWLOGS=true
MACOSX=false

# --------------------------------

# if my macosx then not virtualized. 
if [[ `uname -s` == Darwin* ]]; then
	MACOSX=true
    HOST=127.0.0.1
else
    HOST=(`hostname -I`)
    HOST=${HOST[0]}
fi

VMHOST_IP=$HOST:$PORT

# kill processes using PORT 1433
# lsof -ti:$PORT | xargs kill

# --------------------------------
# Remove old containers if needed
# --------------------------------

OLD_CONTAINER=`docker ps -aqf name=$DOCKER_NAME`

if [ "$OLD_CONTAINER" != "" ]; then
    echo "Please wait. Removing existing docker container $DOCKER_NAME : $OLD_CONTAINER"
    docker stop $OLD_CONTAINER
    docker rm $OLD_CONTAINER
fi


if $MACOSX; then 
	docker rm $STORE_CONTAINER
else 
	sudo rm -rf $STORE
fi 

# --------------------------------
# Create the new docker container 
# --------------------------------

echo 
echo 
echo "Creating docker container:"

# call import
fn_create_docker_database

NEW_CONTAINER=`docker ps -aqf name=$DOCKER_NAME`

#docker inspect $DOCKER_NAME | grep IPAddr

echo "....................."
echo "defuser    : $USERID"
echo "defpass    : $PASSWORD"
echo "dockername : $DOCKER_NAME"
echo "dockerid   : $NEW_CONTAINER"
echo "ip address : $VMHOST_IP"
echo "port       : $PORT"
echo "database   : $DATABASE_NAME"
echo "....................."

# --------------------------------
# Create the database within the container as needed 
# --------------------------------

sleep 10 

# call import
fn_execute_sql_init

# --------------------------------
# Finally just display docker 
# --------------------------------

echo 
echo 

docker ps -af name=$DOCKER_NAME

if $SHOWLOGS; then
    docker logs -f $NEW_CONTAINER
fi
